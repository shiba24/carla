#!/usr/bin/env python

# Copyright (c) 2019 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

import glob
import os
import sys
import numpy as np

try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

import random
import time


def save_events(image):
    print('Saving events...')
    # txt_name = os.path.join(output_prefix, EVENT_TEXT)
    f = open('_out/event/%09d.txt' % image.frame, 'wb')

    # [t, x(w), y(h), p {0, 1}]
    for _, msg, _ in tqdm(bag.read_messages(topics=EVENT_TOPIC_NAME)):
        t = np.array([e.ts.to_sec() for e in msg.events])
        x = np.array([e.x for e in msg.events])
        y = np.array([e.y for e in msg.events])
        p = np.array([e.polarity for e in msg.events]).astype(np.int16)
        output = np.concatenate([t[:, None], x[:, None], y[:, None], p[:, None]], axis=1)
        np.savetxt(f, output, fmt='%f %i %i %i')
    f.close()


def main():
    actor_list = []

    # In this tutorial script, we are going to add a vehicle to the simulation
    # and let it drive in autopilot. We will also create a camera attached to
    # that vehicle, and save all the images generated by the camera to disk.

    try:
        # First of all, we need to create the client that will send the requests
        # to the simulator. Here we'll assume the simulator is accepting
        # requests in the localhost at port 2000.
        client = carla.Client('localhost', 2000)
        client.set_timeout(2.0)

        # Once we have a client we can retrieve the world that is currently
        # running.
        world = client.get_world()

        # For event camera. 1000 Hz
        settings = world.get_settings()
        settings.fixed_delta_seconds = 0.001
        world.apply_settings(settings)

        # The world contains the list blueprints that we can use for adding new
        # actors into the simulation.
        blueprint_library = world.get_blueprint_library()

        # Now let's filter all the blueprints of type 'vehicle' and choose one
        # at random.
        bp = random.choice(blueprint_library.filter('vehicle'))

        # A blueprint contains the list of attributes that define a vehicle's
        # instance, we can read them and modify some of them. For instance,
        # let's randomize its color.
        if bp.has_attribute('color'):
            color = random.choice(bp.get_attribute('color').recommended_values)
            bp.set_attribute('color', color)

        # Now we need to give an initial transform to the vehicle. We choose a
        # random transform from the list of recommended spawn points of the map.
        transform = random.choice(world.get_map().get_spawn_points())

        # So let's tell the world to spawn the vehicle.
        vehicle = world.spawn_actor(bp, transform)

        # It is important to note that the actors we create won't be destroyed
        # unless we call their "destroy" function. If we fail to call "destroy"
        # they will stay in the simulation even after we quit the Python script.
        # For that reason, we are storing all the actors we create so we can
        # destroy them afterwards.
        actor_list.append(vehicle)
        print('created %s' % vehicle.type_id)

        # Let's put the vehicle to drive around.
        vehicle.set_autopilot(True)

        # Let's add now a "depth" camera attached to the vehicle. Note that the
        # transform we give here is now relative to the vehicle.
        camera_bp = blueprint_library.find('sensor.camera.depth')
        camera_transform = carla.Transform(carla.Location(x=1.5, z=2.4))
        camera = world.spawn_actor(camera_bp, camera_transform, attach_to=vehicle)
        actor_list.append(camera)
        print('created %s' % camera.type_id)

        # Now we register the function that will be called each time the sensor
        # receives an image. In this example we are saving the image to disk
        # converting the pixels to gray-scale.
        cc = carla.ColorConverter.LogarithmicDepth
        camera.listen(lambda image: image.save_to_disk('_out/depth/%09d.png' % image.frame, cc))

        # # Add DVS camera, at the same position of depth
        dvs_camera = world.spawn_actor(
            blueprint_library.find('sensor.camera.dvs'),
            camera_transform, attach_to=vehicle)
        actor_list.append(dvs_camera)
        print('created %s' % dvs_camera.type_id)

        # # def _save_event(image):
        # #     np.save(open('_out/event/raw_%09d.npy' % image.frame, 'wb'), image.raw_data)
        # #     np.save(open('_out/event/array_%09d.npy' % image.frame, 'wb'), image.to_array())
        dvs_camera.listen(lambda image: image.save_to_disk('_out/event/%09d.txt' % image.frame))

        # dvs_camera.listen(lambda image:
        #     np.save(open('_out/event/%09d.npy' % image.frame, 'wb'), image.to_array())
        # )

        # Add RGB
        rgb_camera = world.spawn_actor(blueprint_library.find('sensor.camera.rgb'), camera_transform, attach_to=vehicle)
        actor_list.append(rgb_camera)
        print('created %s' % rgb_camera.type_id)
        rgb_camera.listen(lambda image:
            image.save_to_disk('_out/color/%09d.png' % image.frame, carla.ColorConverter.Raw))

        # array = np.frombuffer(image.to_image().raw_data, dtype=np.dtype("uint8"))

        # Oh wait, I don't like the location we gave to the vehicle, I'm going
        # to move it a bit forward.

        # for 
        location = vehicle.get_location()
        location.x += 40
        vehicle.set_location(location)
        print('moved vehicle to %s' % location)

        # But the city now is probably quite empty, let's add a few more
        # vehicles.
        # transform.location += carla.Location(x=40, y=-3.2)
        # transform.rotation.yaw = -180.0

        while 1:
            location = vehicle.get_location()
            location.x += 1
            vehicle.set_location(location)
            print('moved vehicle to %s' % location)

            # transform.location.x += 8.0

            # bp = random.choice(blueprint_library.filter('vehicle'))

            # # This time we are using try_spawn_actor. If the spot is already
            # # occupied by another object, the function will return None.
            # npc = world.try_spawn_actor(bp, transform)
            # if npc is not None:
            #     actor_list.append(npc)
            #     npc.set_autopilot()
            #     print('created %s' % npc.type_id)

        time.sleep(5)

    finally:

        print('destroying actors')
        for actor in actor_list:
            actor.destroy()
        print('done.')


if __name__ == '__main__':

    main()
